
generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005228  08005228  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005230  08005230  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000000c  08005244  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08005244  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017008  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfb  00000000  00000000  00037042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00039e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cd4  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169eb  00000000  00000000  000661ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001099b7  00000000  00000000  0007cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018658e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005554  00000000  00000000  001865e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080051f8 	.word	0x080051f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080051f8 	.word	0x080051f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fdd5 	bl	80010e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f824 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fa5e 	bl	80009fc <MX_GPIO_Init>
  MX_ETH_Init();
 8000540:	f000 f986 	bl	8000850 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000544:	f000 f9fc 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000548:	f000 fa2a 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800054c:	f000 f8b2 	bl	80006b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000550:	f000 f902 	bl	8000758 <MX_ADC2_Init>
  MX_DAC_Init();
 8000554:	f000 f952 	bl	80007fc <MX_DAC_Init>
  MX_TIM6_Init();
 8000558:	f000 f9bc 	bl	80008d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <main+0x4c>)
 800055e:	f003 fc39 	bl	8003dd4 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	4806      	ldr	r0, [pc, #24]	; (8000580 <main+0x50>)
 8000566:	f001 f9f8 	bl	800195a <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,2047);
 800056a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0x50>)
 8000574:	f001 fa9d 	bl	8001ab2 <HAL_DAC_SetValue>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x48>
 800057a:	bf00      	nop
 800057c:	2000055c 	.word	0x2000055c
 8000580:	20000548 	.word	0x20000548

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0b8      	sub	sp, #224	; 0xe0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fe28 	bl	80051e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2290      	movs	r2, #144	; 0x90
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fe19 	bl	80051e8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b6:	f002 fa7d 	bl	8002ab4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b3b      	ldr	r3, [pc, #236]	; (80006a8 <SystemClock_Config+0x124>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	4a3a      	ldr	r2, [pc, #232]	; (80006a8 <SystemClock_Config+0x124>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	6413      	str	r3, [r2, #64]	; 0x40
 80005c6:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <SystemClock_Config+0x124>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <SystemClock_Config+0x128>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a35      	ldr	r2, [pc, #212]	; (80006ac <SystemClock_Config+0x128>)
 80005d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <SystemClock_Config+0x128>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000606:	2304      	movs	r3, #4
 8000608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800060c:	23d8      	movs	r3, #216	; 0xd8
 800060e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000618:	2309      	movs	r3, #9
 800061a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000628:	4618      	mov	r0, r3
 800062a:	f002 faa3 	bl	8002b74 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000634:	f000 fa84 	bl	8000b40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000638:	f002 fa4c 	bl	8002ad4 <HAL_PWREx_EnableOverDrive>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 fa7d 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000668:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800066c:	2107      	movs	r1, #7
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fd2e 	bl	80030d0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800067a:	f000 fa61 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <SystemClock_Config+0x12c>)
 8000680:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000682:	2300      	movs	r3, #0
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	4618      	mov	r0, r3
 8000692:	f002 ff1f 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800069c:	f000 fa50 	bl	8000b40 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	37e0      	adds	r7, #224	; 0xe0
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000
 80006b0:	00200100 	.word	0x00200100

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f000 fd65 	bl	80011e4 <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fa0e 	bl	8000b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f000 fd99 	bl	800126c <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 f9fe 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000500 	.word	0x20000500
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC2_Init+0x98>)
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <MX_ADC2_Init+0x9c>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC2_Init+0x98>)
 8000772:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000776:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_ADC2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC2_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC2_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_ADC2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_ADC2_Init+0x98>)
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <MX_ADC2_Init+0xa0>)
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007ba:	f000 fd13 	bl	80011e4 <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f9bc 	bl	8000b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007c8:	2309      	movs	r3, #9
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC2_Init+0x98>)
 80007da:	f000 fd47 	bl	800126c <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007e4:	f000 f9ac 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000b4 	.word	0x200000b4
 80007f4:	40012100 	.word	0x40012100
 80007f8:	0f000001 	.word	0x0f000001

080007fc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DAC_Init+0x4c>)
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_DAC_Init+0x50>)
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_DAC_Init+0x4c>)
 8000812:	f001 f880 	bl	8001916 <HAL_DAC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800081c:	f000 f990 	bl	8000b40 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000820:	2304      	movs	r3, #4
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	2210      	movs	r2, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_DAC_Init+0x4c>)
 8000830:	f001 f96e 	bl	8001b10 <HAL_DAC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800083a:	f000 f981 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000548 	.word	0x20000548
 800084c:	40007400 	.word	0x40007400

08000850 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_ETH_Init+0x78>)
 8000856:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <MX_ETH_Init+0x7c>)
 8000858:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ETH_Init+0x78>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ETH_Init+0x78>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ETH_Init+0x78>)
 800086a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800086e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_ETH_Init+0x78>)
 8000872:	2200      	movs	r2, #0
 8000874:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_ETH_Init+0x80>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_ETH_Init+0x80>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_ETH_Init+0x80>)
 8000884:	22e1      	movs	r2, #225	; 0xe1
 8000886:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_ETH_Init+0x80>)
 800088a:	2200      	movs	r2, #0
 800088c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_ETH_Init+0x80>)
 8000890:	2200      	movs	r2, #0
 8000892:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_ETH_Init+0x80>)
 8000896:	2200      	movs	r2, #0
 8000898:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_ETH_Init+0x78>)
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <MX_ETH_Init+0x80>)
 800089e:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_ETH_Init+0x78>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_ETH_Init+0x78>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_ETH_Init+0x78>)
 80008ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008b2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_ETH_Init+0x78>)
 80008b6:	f001 f985 	bl	8001bc4 <HAL_ETH_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80008c0:	f000 f93e 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200005a8 	.word	0x200005a8
 80008cc:	40028000 	.word	0x40028000
 80008d0:	20000028 	.word	0x20000028

080008d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_TIM6_Init+0x64>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_TIM6_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_TIM6_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_TIM6_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1079;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_TIM6_Init+0x64>)
 80008f8:	f240 4237 	movw	r2, #1079	; 0x437
 80008fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_TIM6_Init+0x64>)
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_TIM6_Init+0x64>)
 8000906:	f003 fa0d 	bl	8003d24 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000910:	f000 f916 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000914:	2320      	movs	r3, #32
 8000916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_TIM6_Init+0x64>)
 8000922:	f003 fcc1 	bl	80042a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 f908 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000055c 	.word	0x2000055c
 800093c:	40001000 	.word	0x40001000

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f003 fd3c 	bl	8004400 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f8d7 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000030 	.word	0x20000030
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2206      	movs	r2, #6
 80009b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2201      	movs	r2, #1
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f001 ff1d 	bl	8002822 <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f8a7 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000fc 	.word	0x200000fc

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a3f      	ldr	r2, [pc, #252]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_GPIO_Init+0x130>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa8:	4821      	ldr	r0, [pc, #132]	; (8000b30 <MX_GPIO_Init+0x134>)
 8000aaa:	f001 fea1 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <MX_GPIO_Init+0x138>)
 8000ab4:	f001 fe9c 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x13c>)
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	481b      	ldr	r0, [pc, #108]	; (8000b3c <MX_GPIO_Init+0x140>)
 8000ace:	f001 fce3 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x134>)
 8000aec:	f001 fcd4 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0x138>)
 8000b08:	f001 fcc6 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0x138>)
 8000b20:	f001 fcba 	bl	8002498 <HAL_GPIO_Init>

}
 8000b24:	bf00      	nop
 8000b26:	3730      	adds	r7, #48	; 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40020800 	.word	0x40020800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <HAL_ADC_MspInit+0xc8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d124      	bne.n	8000c00 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481a      	ldr	r0, [pc, #104]	; (8000c64 <HAL_ADC_MspInit+0xd0>)
 8000bfa:	f001 fc4d 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bfe:	e028      	b.n	8000c52 <HAL_ADC_MspInit+0xbe>
  else if(hadc->Instance==ADC2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <HAL_ADC_MspInit+0xd4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d123      	bne.n	8000c52 <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_ADC_MspInit+0xcc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <HAL_ADC_MspInit+0xd8>)
 8000c4e:	f001 fc23 	bl	8002498 <HAL_GPIO_Init>
}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40012100 	.word	0x40012100
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_DAC_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000c98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_DAC_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DAC_MspInit+0x8c>)
 8000cd6:	f001 fbdf 	bl	8002498 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2036      	movs	r0, #54	; 0x36
 8000ce0:	f000 fde3 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 fdfc 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40007400 	.word	0x40007400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_ETH_MspInit+0x158>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	f040 8096 	bne.w	8000e50 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d24:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b4a      	ldr	r3, [pc, #296]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
 8000d48:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a3a      	ldr	r2, [pc, #232]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_ETH_MspInit+0x15c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dcc:	2332      	movs	r3, #50	; 0x32
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	481e      	ldr	r0, [pc, #120]	; (8000e60 <HAL_ETH_MspInit+0x160>)
 8000de8:	f001 fb56 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dec:	2386      	movs	r3, #134	; 0x86
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4817      	ldr	r0, [pc, #92]	; (8000e64 <HAL_ETH_MspInit+0x164>)
 8000e08:	f001 fb46 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <HAL_ETH_MspInit+0x168>)
 8000e2a:	f001 fb35 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e40:	230b      	movs	r3, #11
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <HAL_ETH_MspInit+0x16c>)
 8000e4c:	f001 fb24 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40028000 	.word	0x40028000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40021800 	.word	0x40021800

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_TIM_Base_MspInit+0x44>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d113      	bne.n	8000eaa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_Base_MspInit+0x48>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2036      	movs	r0, #54	; 0x36
 8000ea0:	f000 fd03 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f000 fd1c 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40001000 	.word	0x40001000
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d128      	bne.n	8000f30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_UART_MspInit+0x80>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f20:	2307      	movs	r3, #7
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0x84>)
 8000f2c:	f001 fab4 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f64:	d141      	bne.n	8000fea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f90:	230a      	movs	r3, #10
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <HAL_PCD_MspInit+0xb4>)
 8000f9c:	f001 fa7c 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <HAL_PCD_MspInit+0xb4>)
 8000fb6:	f001 fa6f 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f888 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <TIM6_DAC_IRQHandler+0x14>)
 8001056:	f000 fcd2 	bl	80019fe <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <TIM6_DAC_IRQHandler+0x18>)
 800105c:	f002 ff32 	bl	8003ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000548 	.word	0x20000548
 8001068:	2000055c 	.word	0x2000055c

0800106c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ac:	4c0b      	ldr	r4, [pc, #44]	; (80010dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ba:	f7ff ffd7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010be:	f004 f86f 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c2:	f7ff fa35 	bl	8000530 <main>
  bx  lr    
 80010c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010d4:	08005238 	.word	0x08005238
  ldr r2, =_sbss
 80010d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010dc:	200005f4 	.word	0x200005f4

080010e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>

080010e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 fbd4 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f805 	bl	80010fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010f2:	f7ff fd2b 	bl	8000b4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fbef 	bl	80018fe <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 fbb7 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200005f0 	.word	0x200005f0

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200005f0 	.word	0x200005f0

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e031      	b.n	800125e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fcc6 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_ADC_Init+0x84>)
 8001228:	4013      	ands	r3, r2
 800122a:	f043 0202 	orr.w	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f964 	bl	8001500 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
 800124e:	e001      	b.n	8001254 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	ffffeefd 	.word	0xffffeefd

0800126c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x1c>
 8001284:	2302      	movs	r3, #2
 8001286:	e12a      	b.n	80014de <HAL_ADC_ConfigChannel+0x272>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d93a      	bls.n	800130e <HAL_ADC_ConfigChannel+0xa2>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012a0:	d035      	beq.n	800130e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68d9      	ldr	r1, [r3, #12]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	3b1e      	subs	r3, #30
 80012b8:	2207      	movs	r2, #7
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a87      	ldr	r2, [pc, #540]	; (80014ec <HAL_ADC_ConfigChannel+0x280>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10a      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	061a      	lsls	r2, r3, #24
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e6:	e035      	b.n	8001354 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	4603      	mov	r3, r0
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4403      	add	r3, r0
 8001300:	3b1e      	subs	r3, #30
 8001302:	409a      	lsls	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130c:	e022      	b.n	8001354 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6919      	ldr	r1, [r3, #16]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	2207      	movs	r2, #7
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43da      	mvns	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	400a      	ands	r2, r1
 8001330:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6919      	ldr	r1, [r3, #16]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	4603      	mov	r3, r0
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4403      	add	r3, r0
 800134a:	409a      	lsls	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b06      	cmp	r3, #6
 800135a:	d824      	bhi.n	80013a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b05      	subs	r3, #5
 800136e:	221f      	movs	r2, #31
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43da      	mvns	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b05      	subs	r3, #5
 8001398:	fa00 f203 	lsl.w	r2, r0, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
 80013a4:	e04c      	b.n	8001440 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d824      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	; 0x23
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b23      	subs	r3, #35	; 0x23
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
 80013f6:	e023      	b.n	8001440 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b41      	subs	r3, #65	; 0x41
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43da      	mvns	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	400a      	ands	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b41      	subs	r3, #65	; 0x41
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_ADC_ConfigChannel+0x284>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10a      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1f4>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001452:	d105      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 800145a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800145e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <HAL_ADC_ConfigChannel+0x284>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d109      	bne.n	800147e <HAL_ADC_ConfigChannel+0x212>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d105      	bne.n	800147e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 8001478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800147c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_ADC_ConfigChannel+0x284>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d125      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x268>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_ADC_ConfigChannel+0x280>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d003      	beq.n	800149a <HAL_ADC_ConfigChannel+0x22e>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b11      	cmp	r3, #17
 8001498:	d11c      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_ADC_ConfigChannel+0x288>)
 80014a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_ADC_ConfigChannel+0x280>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_ADC_ConfigChannel+0x28c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_ADC_ConfigChannel+0x290>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9a      	lsrs	r2, r3, #18
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014c6:	e002      	b.n	80014ce <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f9      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	10000012 	.word	0x10000012
 80014f0:	40012000 	.word	0x40012000
 80014f4:	40012300 	.word	0x40012300
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83

08001500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001508:	4b78      	ldr	r3, [pc, #480]	; (80016ec <ADC_Init+0x1ec>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a77      	ldr	r2, [pc, #476]	; (80016ec <ADC_Init+0x1ec>)
 800150e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001512:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001514:	4b75      	ldr	r3, [pc, #468]	; (80016ec <ADC_Init+0x1ec>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4973      	ldr	r1, [pc, #460]	; (80016ec <ADC_Init+0x1ec>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6899      	ldr	r1, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <ADC_Init+0x1f0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6899      	ldr	r1, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e00f      	b.n	80015fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0202 	bic.w	r2, r2, #2
 8001608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	005a      	lsls	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001636:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	3b01      	subs	r3, #1
 8001654:	035a      	lsls	r2, r3, #13
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e007      	b.n	8001670 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	3b01      	subs	r3, #1
 800168c:	051a      	lsls	r2, r3, #20
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b2:	025a      	lsls	r2, r3, #9
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6899      	ldr	r1, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	029a      	lsls	r2, r3, #10
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40012300 	.word	0x40012300
 80016f0:	0f000001 	.word	0x0f000001

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	05fa0000 	.word	0x05fa0000

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff3e 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff31 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e014      	b.n	8001952 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	791b      	ldrb	r3, [r3, #4]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f999 	bl	8000c70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_DAC_Start+0x16>
 800196c:	2302      	movs	r3, #2
 800196e:	e040      	b.n	80019f2 <HAL_DAC_Start+0x98>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2201      	movs	r2, #1
 800198a:	409a      	lsls	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10f      	bne.n	80019ba <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80019a4:	2b3c      	cmp	r3, #60	; 0x3c
 80019a6:	d11d      	bne.n	80019e4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	e014      	b.n	80019e4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	213c      	movs	r1, #60	; 0x3c
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0202 	orr.w	r2, r2, #2
 80019e2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a14:	d120      	bne.n	8001a58 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a24:	d118      	bne.n	8001a58 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f852 	bl	8001afc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a66:	d120      	bne.n	8001aaa <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a76:	d118      	bne.n	8001aaa <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f882 	bl	8001bae <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e004      	b.n	8001ae6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3314      	adds	r3, #20
 8001ae4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_DAC_ConfigChannel+0x18>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e03c      	b.n	8001ba2 <HAL_DAC_ConfigChannel+0x92>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2202      	movs	r2, #2
 8001b32:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	22c0      	movs	r2, #192	; 0xc0
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001bd4:	4ba9      	ldr	r3, [pc, #676]	; (8001e7c <HAL_ETH_Init+0x2b8>)
 8001bd6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e181      	b.n	8001eee <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff f87e 	bl	8000d00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_ETH_Init+0x2bc>)
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	4a9d      	ldr	r2, [pc, #628]	; (8001e80 <HAL_ETH_Init+0x2bc>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c10:	4b9b      	ldr	r3, [pc, #620]	; (8001e80 <HAL_ETH_Init+0x2bc>)
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c1c:	4b99      	ldr	r3, [pc, #612]	; (8001e84 <HAL_ETH_Init+0x2c0>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <HAL_ETH_Init+0x2c0>)
 8001c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c26:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c28:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <HAL_ETH_Init+0x2c0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4994      	ldr	r1, [pc, #592]	; (8001e84 <HAL_ETH_Init+0x2c0>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4e:	f7ff fa99 	bl	8001184 <HAL_GetTick>
 8001c52:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c54:	e011      	b.n	8001c7a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001c56:	f7ff fa95 	bl	8001184 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c64:	d909      	bls.n	8001c7a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e139      	b.n	8001eee <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e4      	bne.n	8001c56 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f023 031c 	bic.w	r3, r3, #28
 8001c9a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c9c:	f001 fbe6 	bl	800346c <HAL_RCC_GetHCLKFreq>
 8001ca0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4a78      	ldr	r2, [pc, #480]	; (8001e88 <HAL_ETH_Init+0x2c4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d908      	bls.n	8001cbc <HAL_ETH_Init+0xf8>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_ETH_Init+0x2c8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d804      	bhi.n	8001cbc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e027      	b.n	8001d0c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	4a73      	ldr	r2, [pc, #460]	; (8001e8c <HAL_ETH_Init+0x2c8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d908      	bls.n	8001cd6 <HAL_ETH_Init+0x112>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	; (8001e7c <HAL_ETH_Init+0x2b8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d204      	bcs.n	8001cd6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f043 030c 	orr.w	r3, r3, #12
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	e01a      	b.n	8001d0c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4a68      	ldr	r2, [pc, #416]	; (8001e7c <HAL_ETH_Init+0x2b8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d303      	bcc.n	8001ce6 <HAL_ETH_Init+0x122>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <HAL_ETH_Init+0x2cc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d911      	bls.n	8001d0a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_ETH_Init+0x2cc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d908      	bls.n	8001d00 <HAL_ETH_Init+0x13c>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_ETH_Init+0x2d0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d804      	bhi.n	8001d00 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e005      	b.n	8001d0c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	e000      	b.n	8001d0c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d0a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f954 	bl	8001fc8 <HAL_ETH_WritePHYRegister>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d2a:	6939      	ldr	r1, [r7, #16]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f9b1 	bl	8002094 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0d7      	b.n	8001eee <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d3e:	20ff      	movs	r0, #255	; 0xff
 8001d40:	f7ff fa2c 	bl	800119c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a5 	beq.w	8001e98 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fa19 	bl	8001184 <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8cb 	bl	8001ef8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001d62:	f7ff fa0f 	bl	8001184 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d90f      	bls.n	8001d94 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d78:	6939      	ldr	r1, [r7, #16]
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f98a 	bl	8002094 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0ac      	b.n	8001eee <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0da      	beq.n	8001d54 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001d9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f90f 	bl	8001fc8 <HAL_ETH_WritePHYRegister>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f96c 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e092      	b.n	8001eee <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f9dc 	bl	8001184 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f88e 	bl	8001ef8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001ddc:	f7ff f9d2 	bl	8001184 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d90f      	bls.n	8001e0e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f94d 	bl	8002094 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e06f      	b.n	8001eee <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0da      	beq.n	8001dce <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2110      	movs	r1, #16
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f869 	bl	8001ef8 <HAL_ETH_ReadPHYRegister>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e30:	6939      	ldr	r1, [r7, #16]
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f92e 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e40:	2301      	movs	r3, #1
 8001e42:	e054      	b.n	8001eee <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e002      	b.n	8001e5e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	e035      	b.n	8001edc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e030      	b.n	8001edc <HAL_ETH_Init+0x318>
 8001e7a:	bf00      	nop
 8001e7c:	03938700 	.word	0x03938700
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	01312cff 	.word	0x01312cff
 8001e8c:	02160ebf 	.word	0x02160ebf
 8001e90:	05f5e0ff 	.word	0x05f5e0ff
 8001e94:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f889 	bl	8001fc8 <HAL_ETH_WritePHYRegister>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ec0:	6939      	ldr	r1, [r7, #16]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8e6 	bl	8002094 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e00c      	b.n	8001eee <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ed4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ed8:	f7ff f960 	bl	800119c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001edc:	6939      	ldr	r1, [r7, #16]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8d8 	bl	8002094 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	460b      	mov	r3, r1
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b82      	cmp	r3, #130	; 0x82
 8001f18:	d101      	bne.n	8001f1e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e050      	b.n	8001fc0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2282      	movs	r2, #130	; 0x82
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 031c 	and.w	r3, r3, #28
 8001f34:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8a1b      	ldrh	r3, [r3, #16]
 8001f3a:	02db      	lsls	r3, r3, #11
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f44:	897b      	ldrh	r3, [r7, #10]
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f023 0302 	bic.w	r3, r3, #2
 8001f58:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6a:	f7ff f90b 	bl	8001184 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f70:	e015      	b.n	8001f9e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001f72:	f7ff f907 	bl	8001184 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d309      	bcc.n	8001f96 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e014      	b.n	8001fc0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e4      	bne.n	8001f72 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b42      	cmp	r3, #66	; 0x42
 8001fe8:	d101      	bne.n	8001fee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	e04e      	b.n	800208c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2242      	movs	r2, #66	; 0x42
 8001ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 031c 	and.w	r3, r3, #28
 8002004:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8a1b      	ldrh	r3, [r3, #16]
 800200a:	02db      	lsls	r3, r3, #11
 800200c:	b29b      	uxth	r3, r3
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002014:	897b      	ldrh	r3, [r7, #10]
 8002016:	019b      	lsls	r3, r3, #6
 8002018:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002044:	f7ff f89e 	bl	8001184 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800204a:	e015      	b.n	8002078 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800204c:	f7ff f89a 	bl	8001184 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d309      	bcc.n	8002070 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e00d      	b.n	800208c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e4      	bne.n	800204c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0b0      	sub	sp, #192	; 0xc0
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020de:	663b      	str	r3, [r7, #96]	; 0x60
 80020e0:	e001      	b.n	80020e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020f0:	2300      	movs	r3, #0
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002100:	2340      	movs	r3, #64	; 0x40
 8002102:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	4bab      	ldr	r3, [pc, #684]	; (800241c <ETH_MACDMAConfig+0x388>)
 800216e:	4013      	ands	r3, r2
 8002170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002174:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002178:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800217a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800217c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002180:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002186:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800218a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800218c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800218e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002194:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002198:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800219a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800219c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800219e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80021aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7fe ffe7 	bl	800119c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002204:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002206:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002212:	2001      	movs	r0, #1
 8002214:	f7fe ffc2 	bl	800119c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002220:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800222a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002234:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002240:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002244:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002248:	4013      	ands	r3, r2
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002252:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002258:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800225a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800225e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002264:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800226a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800226c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002270:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002284:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002290:	2001      	movs	r0, #1
 8002292:	f7fe ff83 	bl	800119c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7fe ff6e 	bl	800119c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022ee:	2304      	movs	r3, #4
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800230e:	2300      	movs	r3, #0
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002312:	2300      	movs	r3, #0
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f241 0318 	movw	r3, #4120	; 0x1018
 800231e:	4413      	add	r3, r2
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002326:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <ETH_MACDMAConfig+0x38c>)
 800232c:	4013      	ands	r3, r2
 800232e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002332:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002334:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002336:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002338:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800233a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800233c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800233e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002340:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002342:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002344:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002346:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002348:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800234a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800234e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002352:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f241 0318 	movw	r3, #4120	; 0x1018
 8002366:	4413      	add	r3, r2
 8002368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f241 0318 	movw	r3, #4120	; 0x1018
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe ff0c 	bl	800119c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f241 0318 	movw	r3, #4120	; 0x1018
 800238c:	4413      	add	r3, r2
 800238e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002392:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002398:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800239c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80023a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80023ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7fe fee5 	bl	800119c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10d      	bne.n	8002404 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <ETH_MACDMAConfig+0x390>)
 80023fa:	431a      	orrs	r2, r3
 80023fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002400:	440b      	add	r3, r1
 8002402:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	461a      	mov	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f80b 	bl	8002428 <ETH_MACAddressConfig>
}
 8002412:	bf00      	nop
 8002414:	37c0      	adds	r7, #192	; 0xc0
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	ff20810f 	.word	0xff20810f
 8002420:	f8de3f23 	.word	0xf8de3f23
 8002424:	00010040 	.word	0x00010040

08002428 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3305      	adds	r3, #5
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	3204      	adds	r2, #4
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <ETH_MACAddressConfig+0x68>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3303      	adds	r3, #3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	061a      	lsls	r2, r3, #24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3302      	adds	r3, #2
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3301      	adds	r3, #1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4313      	orrs	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <ETH_MACAddressConfig+0x6c>)
 800247a:	4413      	add	r3, r2
 800247c:	461a      	mov	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40028040 	.word	0x40028040
 8002494:	40028044 	.word	0x40028044

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e175      	b.n	80027a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8164 	bne.w	800279e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d00b      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ea:	2b11      	cmp	r3, #17
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x100>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80be 	beq.w	800279e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a65      	ldr	r2, [pc, #404]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800263a:	4a61      	ldr	r2, [pc, #388]	; (80027c0 <HAL_GPIO_Init+0x328>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d037      	beq.n	80026d6 <HAL_GPIO_Init+0x23e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d031      	beq.n	80026d2 <HAL_GPIO_Init+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_GPIO_Init+0x334>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02b      	beq.n	80026ce <HAL_GPIO_Init+0x236>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <HAL_GPIO_Init+0x338>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x232>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_GPIO_Init+0x33c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <HAL_GPIO_Init+0x340>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x22a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_GPIO_Init+0x344>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x226>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_GPIO_Init+0x348>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x222>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <HAL_GPIO_Init+0x34c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x21e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	; (80027e8 <HAL_GPIO_Init+0x350>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x21a>
 80026ae:	2309      	movs	r3, #9
 80026b0:	e012      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b2:	230a      	movs	r3, #10
 80026b4:	e010      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b6:	2308      	movs	r3, #8
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026e8:	4935      	ldr	r1, [pc, #212]	; (80027c0 <HAL_GPIO_Init+0x328>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_GPIO_Init+0x354>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_GPIO_Init+0x354>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f ae86 	bls.w	80024b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40021400 	.word	0x40021400
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40021c00 	.word	0x40021c00
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022400 	.word	0x40022400
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	041a      	lsls	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002824:	b08f      	sub	sp, #60	; 0x3c
 8002826:	af0a      	add	r7, sp, #40	; 0x28
 8002828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e116      	b.n	8002a62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fb78 	bl	8000f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fa34 	bl	8004ce0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	687e      	ldr	r6, [r7, #4]
 8002880:	466d      	mov	r5, sp
 8002882:	f106 0410 	add.w	r4, r6, #16
 8002886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002892:	e885 0003 	stmia.w	r5, {r0, r1}
 8002896:	1d33      	adds	r3, r6, #4
 8002898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289a:	6838      	ldr	r0, [r7, #0]
 800289c:	f002 f9c8 	bl	8004c30 <USB_CoreInit>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0d7      	b.n	8002a62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fa22 	bl	8004d02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e04a      	b.n	800295a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333d      	adds	r3, #61	; 0x3d
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	333c      	adds	r3, #60	; 0x3c
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	b298      	uxth	r0, r3
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3342      	adds	r3, #66	; 0x42
 8002900:	4602      	mov	r2, r0
 8002902:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	333f      	adds	r3, #63	; 0x3f
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3344      	adds	r3, #68	; 0x44
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3348      	adds	r3, #72	; 0x48
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3350      	adds	r3, #80	; 0x50
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	3301      	adds	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d3af      	bcc.n	80028c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e044      	b.n	80029f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	3301      	adds	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3b5      	bcc.n	800296a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	687e      	ldr	r6, [r7, #4]
 8002a06:	466d      	mov	r5, sp
 8002a08:	f106 0410 	add.w	r4, r6, #16
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a1c:	1d33      	adds	r3, r6, #4
 8002a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a20:	6838      	ldr	r0, [r7, #0]
 8002a22:	f002 f999 	bl	8004d58 <USB_DevInit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e014      	b.n	8002a62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f80b 	bl	8002a6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fb4b 	bl	80050f6 <USB_DevDisconnect>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	10000003 	.word	0x10000003

08002ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40007000 	.word	0x40007000

08002ad4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_PWREx_EnableOverDrive+0x98>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b02:	f7fe fb3f 	bl	8001184 <HAL_GetTick>
 8002b06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b0a:	f7fe fb3b 	bl	8001184 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b18:	d901      	bls.n	8002b1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e022      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0f      	ldr	r2, [pc, #60]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b38:	f7fe fb24 	bl	8001184 <HAL_GetTick>
 8002b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3e:	e009      	b.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b40:	f7fe fb20 	bl	8001184 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4e:	d901      	bls.n	8002b54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e007      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d1ee      	bne.n	8002b40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e29b      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b98:	4b96      	ldr	r3, [pc, #600]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba4:	4b93      	ldr	r3, [pc, #588]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
 8002bb0:	4b90      	ldr	r3, [pc, #576]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d06c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x130>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d168      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e275      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x7a>
 8002be0:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e02e      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x9c>
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7b      	ldr	r2, [pc, #492]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0xc0>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a72      	ldr	r2, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xd8>
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6e      	ldr	r2, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6b      	ldr	r2, [pc, #428]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fa96 	bl	8001184 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe fa92 	bl	8001184 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e229      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe8>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa82 	bl	8001184 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fa7e 	bl	8001184 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e215      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x110>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d069      	beq.n	8002d86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb2:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1e9      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	493d      	ldr	r1, [pc, #244]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e040      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a38      	ldr	r2, [pc, #224]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fa34 	bl	8001184 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe fa30 	bl	8001184 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1c7      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4929      	ldr	r1, [pc, #164]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fa10 	bl	8001184 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe fa0c 	bl	8001184 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1a3      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d038      	beq.n	8002e04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe f9ed 	bl	8001184 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe f9e9 	bl	8001184 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e180      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x23a>
 8002dcc:	e01a      	b.n	8002e04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe f9d3 	bl	8001184 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe f9cf 	bl	8001184 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d903      	bls.n	8002df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e166      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
 8002df4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a4 	beq.w	8002f5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a88      	ldr	r2, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2a:	4b86      	ldr	r3, [pc, #536]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3a:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e46:	4b80      	ldr	r3, [pc, #512]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7f      	ldr	r2, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe f997 	bl	8001184 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe f993 	bl	8001184 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	; 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e12a      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b76      	ldr	r3, [pc, #472]	; (8003048 <HAL_RCC_OscConfig+0x4d4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x31a>
 8002e80:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x33c>
 8002e96:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a6a      	ldr	r2, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	4b68      	ldr	r3, [pc, #416]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a67      	ldr	r2, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x35e>
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a61      	ldr	r2, [pc, #388]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a5e      	ldr	r2, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x376>
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f947 	bl	8001184 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f943 	bl	8001184 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d8      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x386>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f931 	bl	8001184 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe f92d 	bl	8001184 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0c2      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80ae 	beq.w	80030c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d06d      	beq.n	800304c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d14b      	bne.n	8003010 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe f8fe 	bl	8001184 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fe f8fa 	bl	8001184 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e091      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	491b      	ldr	r1, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f8cc 	bl	8001184 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe f8c8 	bl	8001184 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e05f      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
 800300e:	e057      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe f8b2 	bl	8001184 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe f8ae 	bl	8001184 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e045      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x4d0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x4b0>
 8003042:	e03d      	b.n	80030c0 <HAL_RCC_OscConfig+0x54c>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_RCC_OscConfig+0x558>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d030      	beq.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d129      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d122      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003082:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003084:	4293      	cmp	r3, r2
 8003086:	d119      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d10f      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c4:	f7fd ffde 	bl	8001184 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fd ffda 	bl	8001184 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 020f 	bic.w	r2, r3, #15
 800320a:	4922      	ldr	r1, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd ff3a 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023c00 	.word	0x40023c00
 8003298:	40023800 	.word	0x40023800
 800329c:	08005210 	.word	0x08005210
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	2300      	movs	r3, #0
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c0:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	f200 80bd 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x1a4>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x34>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032da:	e0b7      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032de:	60bb      	str	r3, [r7, #8]
      break;
 80032e0:	e0b7      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032e4:	60bb      	str	r3, [r7, #8]
      break;
 80032e6:	e0b4      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04d      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	461a      	mov	r2, r3
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	ea02 0800 	and.w	r8, r2, r0
 8003316:	ea03 0901 	and.w	r9, r3, r1
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	014b      	lsls	r3, r1, #5
 8003328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800332c:	0142      	lsls	r2, r0, #5
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	ebb0 0008 	subs.w	r0, r0, r8
 8003336:	eb61 0109 	sbc.w	r1, r1, r9
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003348:	0182      	lsls	r2, r0, #6
 800334a:	1a12      	subs	r2, r2, r0
 800334c:	eb63 0301 	sbc.w	r3, r3, r1
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	00d9      	lsls	r1, r3, #3
 800335a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800335e:	00d0      	lsls	r0, r2, #3
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	eb12 0208 	adds.w	r2, r2, r8
 8003368:	eb43 0309 	adc.w	r3, r3, r9
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	0259      	lsls	r1, r3, #9
 8003376:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800337a:	0250      	lsls	r0, r2, #9
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	461a      	mov	r2, r3
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	f7fc ff54 	bl	8000238 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e04a      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	461a      	mov	r2, r3
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033aa:	f04f 0100 	mov.w	r1, #0
 80033ae:	ea02 0400 	and.w	r4, r2, r0
 80033b2:	ea03 0501 	and.w	r5, r3, r1
 80033b6:	4620      	mov	r0, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	014b      	lsls	r3, r1, #5
 80033c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033c8:	0142      	lsls	r2, r0, #5
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	1b00      	subs	r0, r0, r4
 80033d0:	eb61 0105 	sbc.w	r1, r1, r5
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	018b      	lsls	r3, r1, #6
 80033de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033e2:	0182      	lsls	r2, r0, #6
 80033e4:	1a12      	subs	r2, r2, r0
 80033e6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	00d9      	lsls	r1, r3, #3
 80033f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033f8:	00d0      	lsls	r0, r2, #3
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	1912      	adds	r2, r2, r4
 8003400:	eb45 0303 	adc.w	r3, r5, r3
 8003404:	f04f 0000 	mov.w	r0, #0
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	0299      	lsls	r1, r3, #10
 800340e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003412:	0290      	lsls	r0, r2, #10
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	f7fc ff08 	bl	8000238 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	60bb      	str	r3, [r7, #8]
      break;
 800344a:	e002      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800344e:	60bb      	str	r3, [r7, #8]
      break;
 8003450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003452:	68bb      	ldr	r3, [r7, #8]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400
 8003468:	007a1200 	.word	0x007a1200

0800346c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCC_GetHCLKFreq+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000000 	.word	0x20000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003488:	f7ff fff0 	bl	800346c <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08005220 	.word	0x08005220

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034b0:	f7ff ffdc 	bl	800346c <HAL_RCC_GetHCLKFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0b5b      	lsrs	r3, r3, #13
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08005220 	.word	0x08005220

080034d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034fc:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a68      	ldr	r2, [pc, #416]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003506:	6093      	str	r3, [r2, #8]
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	4964      	ldr	r1, [pc, #400]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	4959      	ldr	r1, [pc, #356]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800356a:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	494a      	ldr	r1, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 808b 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	; 0x40
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd fdd2 	bl	8001184 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd fdce 	bl	8001184 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e38f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d035      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d02e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d114      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fd96 	bl	8001184 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fd92 	bl	8001184 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e351      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368a:	d111      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800369a:	400b      	ands	r3, r1
 800369c:	4901      	ldr	r1, [pc, #4]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
 80036a2:	e00b      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	0ffffcff 	.word	0x0ffffcff
 80036b0:	4bb3      	ldr	r3, [pc, #716]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4ab2      	ldr	r2, [pc, #712]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ba:	6093      	str	r3, [r2, #8]
 80036bc:	4bb0      	ldr	r3, [pc, #704]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	49ad      	ldr	r1, [pc, #692]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036da:	4ba9      	ldr	r3, [pc, #676]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	4aa7      	ldr	r2, [pc, #668]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ea:	4ba5      	ldr	r3, [pc, #660]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	49a2      	ldr	r1, [pc, #648]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003716:	499a      	ldr	r1, [pc, #616]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372a:	4b95      	ldr	r3, [pc, #596]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003738:	4991      	ldr	r1, [pc, #580]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374c:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	4989      	ldr	r1, [pc, #548]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376e:	4b84      	ldr	r3, [pc, #528]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4980      	ldr	r1, [pc, #512]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003790:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4978      	ldr	r1, [pc, #480]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f023 020c 	bic.w	r2, r3, #12
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	496f      	ldr	r1, [pc, #444]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	4967      	ldr	r1, [pc, #412]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f6:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	495e      	ldr	r1, [pc, #376]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	4956      	ldr	r1, [pc, #344]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800383a:	4b51      	ldr	r3, [pc, #324]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	4945      	ldr	r1, [pc, #276]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	493c      	ldr	r1, [pc, #240]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038a0:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	4934      	ldr	r1, [pc, #208]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038c2:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	492b      	ldr	r1, [pc, #172]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003934:	4912      	ldr	r1, [pc, #72]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003958:	4909      	ldr	r1, [pc, #36]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	4986      	ldr	r1, [pc, #536]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	497d      	ldr	r1, [pc, #500]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d006      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d6 	beq.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c4:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd fbd8 	bl	8001184 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d8:	f7fd fbd4 	bl	8001184 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e195      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d021      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0e1b      	lsrs	r3, r3, #24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	019a      	lsls	r2, r3, #6
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	4958      	ldr	r1, [pc, #352]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d129      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	493e      	ldr	r1, [pc, #248]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	f023 021f 	bic.w	r2, r3, #31
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4938      	ldr	r1, [pc, #224]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	0f1b      	lsrs	r3, r3, #28
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	019a      	lsls	r2, r3, #6
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	4926      	ldr	r1, [pc, #152]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4a:	f7fd fb1b 	bl	8001184 <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b52:	f7fd fb17 	bl	8001184 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b64      	cmp	r3, #100	; 0x64
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	f040 80ce 	bne.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b84:	f7fd fafe 	bl	8001184 <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b8c:	f7fd fafa 	bl	8001184 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d904      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0bb      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb0:	d0ec      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d12a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	0f1b      	lsrs	r3, r3, #28
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	4944      	ldr	r1, [pc, #272]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	493d      	ldr	r1, [pc, #244]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d11d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	4929      	ldr	r1, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4911      	ldr	r1, [pc, #68]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd fa4a 	bl	8001184 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf4:	f7fd fa46 	bl	8001184 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e007      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d1ef      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e049      	b.n	8003dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd f890 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fa00 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d001      	beq.n	8003dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e054      	b.n	8003e96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d01d      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_TIM_Base_Start_IT+0xd8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1c      	ldr	r2, [pc, #112]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_TIM_Base_Start_IT+0xe8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d115      	bne.n	8003e80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xec>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d015      	beq.n	8003e92 <HAL_TIM_Base_Start_IT+0xbe>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d011      	beq.n	8003e92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	e008      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e000      	b.n	8003e94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40010400 	.word	0x40010400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40001800 	.word	0x40001800
 8003ec0:	00010007 	.word	0x00010007

08003ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f90f 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f901 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f912 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0204 	mvn.w	r2, #4
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8e5 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8d7 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8e8 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d122      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d11b      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0208 	mvn.w	r2, #8
 8003f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8bb 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8ad 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8be 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	d122      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0210 	mvn.w	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f891 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f883 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f894 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0201 	mvn.w	r2, #1
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f85d 	bl	8004102 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9b2 	bl	80043d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d10e      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f9a5 	bl	80043ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10e      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f842 	bl	8004152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d10e      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0220 	mvn.w	r2, #32
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f965 	bl	80043c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a40      	ldr	r2, [pc, #256]	; (800427c <TIM_Base_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <TIM_Base_SetConfig+0x118>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <TIM_Base_SetConfig+0x120>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3a      	ldr	r2, [pc, #232]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2f      	ldr	r2, [pc, #188]	; (800427c <TIM_Base_SetConfig+0x114>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d027      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <TIM_Base_SetConfig+0x118>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d023      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <TIM_Base_SetConfig+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a28      	ldr	r2, [pc, #160]	; (8004290 <TIM_Base_SetConfig+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <TIM_Base_SetConfig+0x12c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <TIM_Base_SetConfig+0x130>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <TIM_Base_SetConfig+0x134>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <TIM_Base_SetConfig+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <TIM_Base_SetConfig+0x13c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <TIM_Base_SetConfig+0x114>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40010400 	.word	0x40010400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40001800 	.word	0x40001800
 80042a0:	40001c00 	.word	0x40001c00
 80042a4:	40002000 	.word	0x40002000

080042a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042bc:	2302      	movs	r3, #2
 80042be:	e06d      	b.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a30      	ldr	r2, [pc, #192]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d108      	bne.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d022      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d01d      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d018      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40010400 	.word	0x40010400
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40001800 	.word	0x40001800

080043c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e040      	b.n	8004494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fd4a 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f82c 	bl	800449c <UART_SetConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa82 	bl	8004960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb09 	bl	8004aa4 <UART_CheckIdleState>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4ba7      	ldr	r3, [pc, #668]	; (8004764 <UART_SetConfig+0x2c8>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a95      	ldr	r2, [pc, #596]	; (8004768 <UART_SetConfig+0x2cc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d120      	bne.n	800455a <UART_SetConfig+0xbe>
 8004518:	4b94      	ldr	r3, [pc, #592]	; (800476c <UART_SetConfig+0x2d0>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d816      	bhi.n	8004554 <UART_SetConfig+0xb8>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x90>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	0800453d 	.word	0x0800453d
 8004530:	08004549 	.word	0x08004549
 8004534:	08004543 	.word	0x08004543
 8004538:	0800454f 	.word	0x0800454f
 800453c:	2301      	movs	r3, #1
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e14f      	b.n	80047e2 <UART_SetConfig+0x346>
 8004542:	2302      	movs	r3, #2
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e14c      	b.n	80047e2 <UART_SetConfig+0x346>
 8004548:	2304      	movs	r3, #4
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e149      	b.n	80047e2 <UART_SetConfig+0x346>
 800454e:	2308      	movs	r3, #8
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e146      	b.n	80047e2 <UART_SetConfig+0x346>
 8004554:	2310      	movs	r3, #16
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e143      	b.n	80047e2 <UART_SetConfig+0x346>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a84      	ldr	r2, [pc, #528]	; (8004770 <UART_SetConfig+0x2d4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d132      	bne.n	80045ca <UART_SetConfig+0x12e>
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <UART_SetConfig+0x2d0>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d828      	bhi.n	80045c4 <UART_SetConfig+0x128>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0xdc>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080045c5 	.word	0x080045c5
 8004580:	080045c5 	.word	0x080045c5
 8004584:	080045c5 	.word	0x080045c5
 8004588:	080045b9 	.word	0x080045b9
 800458c:	080045c5 	.word	0x080045c5
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080045c5 	.word	0x080045c5
 8004598:	080045b3 	.word	0x080045b3
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045c5 	.word	0x080045c5
 80045a8:	080045bf 	.word	0x080045bf
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e117      	b.n	80047e2 <UART_SetConfig+0x346>
 80045b2:	2302      	movs	r3, #2
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e114      	b.n	80047e2 <UART_SetConfig+0x346>
 80045b8:	2304      	movs	r3, #4
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e111      	b.n	80047e2 <UART_SetConfig+0x346>
 80045be:	2308      	movs	r3, #8
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e10e      	b.n	80047e2 <UART_SetConfig+0x346>
 80045c4:	2310      	movs	r3, #16
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e10b      	b.n	80047e2 <UART_SetConfig+0x346>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a69      	ldr	r2, [pc, #420]	; (8004774 <UART_SetConfig+0x2d8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d120      	bne.n	8004616 <UART_SetConfig+0x17a>
 80045d4:	4b65      	ldr	r3, [pc, #404]	; (800476c <UART_SetConfig+0x2d0>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d013      	beq.n	800460a <UART_SetConfig+0x16e>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d814      	bhi.n	8004610 <UART_SetConfig+0x174>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d009      	beq.n	80045fe <UART_SetConfig+0x162>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d810      	bhi.n	8004610 <UART_SetConfig+0x174>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <UART_SetConfig+0x15c>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d006      	beq.n	8004604 <UART_SetConfig+0x168>
 80045f6:	e00b      	b.n	8004610 <UART_SetConfig+0x174>
 80045f8:	2300      	movs	r3, #0
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e0f1      	b.n	80047e2 <UART_SetConfig+0x346>
 80045fe:	2302      	movs	r3, #2
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e0ee      	b.n	80047e2 <UART_SetConfig+0x346>
 8004604:	2304      	movs	r3, #4
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e0eb      	b.n	80047e2 <UART_SetConfig+0x346>
 800460a:	2308      	movs	r3, #8
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e0e8      	b.n	80047e2 <UART_SetConfig+0x346>
 8004610:	2310      	movs	r3, #16
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e0e5      	b.n	80047e2 <UART_SetConfig+0x346>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a57      	ldr	r2, [pc, #348]	; (8004778 <UART_SetConfig+0x2dc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d120      	bne.n	8004662 <UART_SetConfig+0x1c6>
 8004620:	4b52      	ldr	r3, [pc, #328]	; (800476c <UART_SetConfig+0x2d0>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800462a:	2bc0      	cmp	r3, #192	; 0xc0
 800462c:	d013      	beq.n	8004656 <UART_SetConfig+0x1ba>
 800462e:	2bc0      	cmp	r3, #192	; 0xc0
 8004630:	d814      	bhi.n	800465c <UART_SetConfig+0x1c0>
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d009      	beq.n	800464a <UART_SetConfig+0x1ae>
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d810      	bhi.n	800465c <UART_SetConfig+0x1c0>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <UART_SetConfig+0x1a8>
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d006      	beq.n	8004650 <UART_SetConfig+0x1b4>
 8004642:	e00b      	b.n	800465c <UART_SetConfig+0x1c0>
 8004644:	2300      	movs	r3, #0
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e0cb      	b.n	80047e2 <UART_SetConfig+0x346>
 800464a:	2302      	movs	r3, #2
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e0c8      	b.n	80047e2 <UART_SetConfig+0x346>
 8004650:	2304      	movs	r3, #4
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e0c5      	b.n	80047e2 <UART_SetConfig+0x346>
 8004656:	2308      	movs	r3, #8
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e0c2      	b.n	80047e2 <UART_SetConfig+0x346>
 800465c:	2310      	movs	r3, #16
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e0bf      	b.n	80047e2 <UART_SetConfig+0x346>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a45      	ldr	r2, [pc, #276]	; (800477c <UART_SetConfig+0x2e0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d125      	bne.n	80046b8 <UART_SetConfig+0x21c>
 800466c:	4b3f      	ldr	r3, [pc, #252]	; (800476c <UART_SetConfig+0x2d0>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d017      	beq.n	80046ac <UART_SetConfig+0x210>
 800467c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004680:	d817      	bhi.n	80046b2 <UART_SetConfig+0x216>
 8004682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004686:	d00b      	beq.n	80046a0 <UART_SetConfig+0x204>
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d811      	bhi.n	80046b2 <UART_SetConfig+0x216>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <UART_SetConfig+0x1fe>
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d006      	beq.n	80046a6 <UART_SetConfig+0x20a>
 8004698:	e00b      	b.n	80046b2 <UART_SetConfig+0x216>
 800469a:	2300      	movs	r3, #0
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e0a0      	b.n	80047e2 <UART_SetConfig+0x346>
 80046a0:	2302      	movs	r3, #2
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e09d      	b.n	80047e2 <UART_SetConfig+0x346>
 80046a6:	2304      	movs	r3, #4
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e09a      	b.n	80047e2 <UART_SetConfig+0x346>
 80046ac:	2308      	movs	r3, #8
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e097      	b.n	80047e2 <UART_SetConfig+0x346>
 80046b2:	2310      	movs	r3, #16
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e094      	b.n	80047e2 <UART_SetConfig+0x346>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a30      	ldr	r2, [pc, #192]	; (8004780 <UART_SetConfig+0x2e4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d125      	bne.n	800470e <UART_SetConfig+0x272>
 80046c2:	4b2a      	ldr	r3, [pc, #168]	; (800476c <UART_SetConfig+0x2d0>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d0:	d017      	beq.n	8004702 <UART_SetConfig+0x266>
 80046d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d6:	d817      	bhi.n	8004708 <UART_SetConfig+0x26c>
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046dc:	d00b      	beq.n	80046f6 <UART_SetConfig+0x25a>
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e2:	d811      	bhi.n	8004708 <UART_SetConfig+0x26c>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <UART_SetConfig+0x254>
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ec:	d006      	beq.n	80046fc <UART_SetConfig+0x260>
 80046ee:	e00b      	b.n	8004708 <UART_SetConfig+0x26c>
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e075      	b.n	80047e2 <UART_SetConfig+0x346>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e072      	b.n	80047e2 <UART_SetConfig+0x346>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e06f      	b.n	80047e2 <UART_SetConfig+0x346>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e06c      	b.n	80047e2 <UART_SetConfig+0x346>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e069      	b.n	80047e2 <UART_SetConfig+0x346>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <UART_SetConfig+0x2e8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d137      	bne.n	8004788 <UART_SetConfig+0x2ec>
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <UART_SetConfig+0x2d0>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004726:	d017      	beq.n	8004758 <UART_SetConfig+0x2bc>
 8004728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800472c:	d817      	bhi.n	800475e <UART_SetConfig+0x2c2>
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004732:	d00b      	beq.n	800474c <UART_SetConfig+0x2b0>
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d811      	bhi.n	800475e <UART_SetConfig+0x2c2>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <UART_SetConfig+0x2aa>
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d006      	beq.n	8004752 <UART_SetConfig+0x2b6>
 8004744:	e00b      	b.n	800475e <UART_SetConfig+0x2c2>
 8004746:	2300      	movs	r3, #0
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e04a      	b.n	80047e2 <UART_SetConfig+0x346>
 800474c:	2302      	movs	r3, #2
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e047      	b.n	80047e2 <UART_SetConfig+0x346>
 8004752:	2304      	movs	r3, #4
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e044      	b.n	80047e2 <UART_SetConfig+0x346>
 8004758:	2308      	movs	r3, #8
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e041      	b.n	80047e2 <UART_SetConfig+0x346>
 800475e:	2310      	movs	r3, #16
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e03e      	b.n	80047e2 <UART_SetConfig+0x346>
 8004764:	efff69f3 	.word	0xefff69f3
 8004768:	40011000 	.word	0x40011000
 800476c:	40023800 	.word	0x40023800
 8004770:	40004400 	.word	0x40004400
 8004774:	40004800 	.word	0x40004800
 8004778:	40004c00 	.word	0x40004c00
 800477c:	40005000 	.word	0x40005000
 8004780:	40011400 	.word	0x40011400
 8004784:	40007800 	.word	0x40007800
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a71      	ldr	r2, [pc, #452]	; (8004954 <UART_SetConfig+0x4b8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d125      	bne.n	80047de <UART_SetConfig+0x342>
 8004792:	4b71      	ldr	r3, [pc, #452]	; (8004958 <UART_SetConfig+0x4bc>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800479c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047a0:	d017      	beq.n	80047d2 <UART_SetConfig+0x336>
 80047a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047a6:	d817      	bhi.n	80047d8 <UART_SetConfig+0x33c>
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ac:	d00b      	beq.n	80047c6 <UART_SetConfig+0x32a>
 80047ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b2:	d811      	bhi.n	80047d8 <UART_SetConfig+0x33c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <UART_SetConfig+0x324>
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047bc:	d006      	beq.n	80047cc <UART_SetConfig+0x330>
 80047be:	e00b      	b.n	80047d8 <UART_SetConfig+0x33c>
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e00d      	b.n	80047e2 <UART_SetConfig+0x346>
 80047c6:	2302      	movs	r3, #2
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e00a      	b.n	80047e2 <UART_SetConfig+0x346>
 80047cc:	2304      	movs	r3, #4
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e007      	b.n	80047e2 <UART_SetConfig+0x346>
 80047d2:	2308      	movs	r3, #8
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e004      	b.n	80047e2 <UART_SetConfig+0x346>
 80047d8:	2310      	movs	r3, #16
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e001      	b.n	80047e2 <UART_SetConfig+0x346>
 80047de:	2310      	movs	r3, #16
 80047e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ea:	d15b      	bne.n	80048a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80047ec:	7ffb      	ldrb	r3, [r7, #31]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d827      	bhi.n	8004842 <UART_SetConfig+0x3a6>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x35c>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe fe32 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8004820:	61b8      	str	r0, [r7, #24]
        break;
 8004822:	e013      	b.n	800484c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe fe42 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8004828:	61b8      	str	r0, [r7, #24]
        break;
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b4b      	ldr	r3, [pc, #300]	; (800495c <UART_SetConfig+0x4c0>)
 800482e:	61bb      	str	r3, [r7, #24]
        break;
 8004830:	e00c      	b.n	800484c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7fe fd39 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8004836:	61b8      	str	r0, [r7, #24]
        break;
 8004838:	e008      	b.n	800484c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	61bb      	str	r3, [r7, #24]
        break;
 8004840:	e004      	b.n	800484c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	77bb      	strb	r3, [r7, #30]
        break;
 800484a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d074      	beq.n	800493c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	005a      	lsls	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	b29b      	uxth	r3, r3
 8004868:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b0f      	cmp	r3, #15
 800486e:	d916      	bls.n	800489e <UART_SetConfig+0x402>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004876:	d212      	bcs.n	800489e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f023 030f 	bic.w	r3, r3, #15
 8004880:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	b29b      	uxth	r3, r3
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	b29a      	uxth	r2, r3
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	4313      	orrs	r3, r2
 8004892:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e04e      	b.n	800493c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	77bb      	strb	r3, [r7, #30]
 80048a2:	e04b      	b.n	800493c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d827      	bhi.n	80048fa <UART_SetConfig+0x45e>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x414>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048fb 	.word	0x080048fb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7fe fdd6 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e013      	b.n	8004904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7fe fde6 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 80048e0:	61b8      	str	r0, [r7, #24]
        break;
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b1d      	ldr	r3, [pc, #116]	; (800495c <UART_SetConfig+0x4c0>)
 80048e6:	61bb      	str	r3, [r7, #24]
        break;
 80048e8:	e00c      	b.n	8004904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe fcdd 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 80048ee:	61b8      	str	r0, [r7, #24]
        break;
 80048f0:	e008      	b.n	8004904 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	61bb      	str	r3, [r7, #24]
        break;
 80048f8:	e004      	b.n	8004904 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77bb      	strb	r3, [r7, #30]
        break;
 8004902:	bf00      	nop
    }

    if (pclk != 0U)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085a      	lsrs	r2, r3, #1
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d908      	bls.n	8004938 <UART_SetConfig+0x49c>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d204      	bcs.n	8004938 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e001      	b.n	800493c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004948:	7fbb      	ldrb	r3, [r7, #30]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40007c00 	.word	0x40007c00
 8004958:	40023800 	.word	0x40023800
 800495c:	00f42400 	.word	0x00f42400

08004960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d10a      	bne.n	8004a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab4:	f7fc fb66 	bl	8001184 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d10e      	bne.n	8004ae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f82d 	bl	8004b36 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e023      	b.n	8004b2e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d10e      	bne.n	8004b12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f817 	bl	8004b36 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00d      	b.n	8004b2e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	e05e      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d05a      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fc fb18 	bl	8001184 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11b      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e043      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02c      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bba:	d124      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bd4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d091      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c30:	b084      	sub	sp, #16
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	f107 001c 	add.w	r0, r7, #28
 8004c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d120      	bne.n	8004c8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <USB_CoreInit+0xac>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa5a 	bl	8005138 <USB_CoreReset>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e010      	b.n	8004cac <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa4e 	bl	8005138 <USB_CoreReset>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10b      	bne.n	8004cca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f043 0206 	orr.w	r2, r3, #6
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cd6:	b004      	add	sp, #16
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	ffbdffbf 	.word	0xffbdffbf

08004ce0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 0201 	bic.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e00b      	b.n	8004d46 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e001      	b.n	8004d46 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e003      	b.n	8004d4e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d46:	2032      	movs	r0, #50	; 0x32
 8004d48:	f7fc fa28 	bl	800119c <HAL_Delay>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d58:	b084      	sub	sp, #16
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e009      	b.n	8004d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3340      	adds	r3, #64	; 0x40
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b0e      	cmp	r3, #14
 8004d90:	d9f2      	bls.n	8004d78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11c      	bne.n	8004dd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e005      	b.n	8004dde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004de4:	461a      	mov	r2, r3
 8004de6:	2300      	movs	r3, #0
 8004de8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	4619      	mov	r1, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	461a      	mov	r2, r3
 8004dfa:	680b      	ldr	r3, [r1, #0]
 8004dfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10c      	bne.n	8004e1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f959 	bl	80050c4 <USB_SetDevSpeed>
 8004e12:	e018      	b.n	8004e46 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e14:	2101      	movs	r1, #1
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f954 	bl	80050c4 <USB_SetDevSpeed>
 8004e1c:	e013      	b.n	8004e46 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d10c      	bne.n	8004e3e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f949 	bl	80050c4 <USB_SetDevSpeed>
 8004e32:	e008      	b.n	8004e46 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e34:	2101      	movs	r1, #1
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f944 	bl	80050c4 <USB_SetDevSpeed>
 8004e3c:	e003      	b.n	8004e46 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e3e:	2103      	movs	r1, #3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f93f 	bl	80050c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e46:	2110      	movs	r1, #16
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8f3 	bl	8005034 <USB_FlushTxFifo>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f911 	bl	8005080 <USB_FlushRxFifo>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2300      	movs	r3, #0
 8004e72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	461a      	mov	r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	e043      	b.n	8004f1a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea8:	d118      	bne.n	8004edc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e013      	b.n	8004eee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e008      	b.n	8004eee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	3301      	adds	r3, #1
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3b7      	bcc.n	8004e92 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e043      	b.n	8004fb0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3e:	d118      	bne.n	8004f72 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e013      	b.n	8004f84 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e008      	b.n	8004f84 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2300      	movs	r3, #0
 8004f82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	2300      	movs	r3, #0
 8004f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3301      	adds	r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3b7      	bcc.n	8004f28 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f043 0210 	orr.w	r2, r3, #16
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	; (800502c <USB_DevInit+0x2d4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800500a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d105      	bne.n	800501c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <USB_DevInit+0x2d8>)
 8005016:	4313      	orrs	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr
 800502c:	803c3800 	.word	0x803c3800
 8005030:	40000004 	.word	0x40000004

08005034 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	019b      	lsls	r3, r3, #6
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <USB_FlushTxFifo+0x48>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e006      	b.n	800506e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d0f0      	beq.n	800504e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	00030d40 	.word	0x00030d40

08005080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2210      	movs	r2, #16
 8005090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <USB_FlushRxFifo+0x40>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e006      	b.n	80050b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d0f0      	beq.n	8005092 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	00030d40 	.word	0x00030d40

080050c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005110:	f023 0303 	bic.w	r3, r3, #3
 8005114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <USB_CoreReset+0x64>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e01b      	b.n	800518e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	daf2      	bge.n	8005144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <USB_CoreReset+0x64>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d0f0      	beq.n	800516e <USB_CoreReset+0x36>

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	00030d40 	.word	0x00030d40

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4d0d      	ldr	r5, [pc, #52]	; (80051d8 <__libc_init_array+0x38>)
 80051a4:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a6:	1b64      	subs	r4, r4, r5
 80051a8:	10a4      	asrs	r4, r4, #2
 80051aa:	2600      	movs	r6, #0
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	4d0b      	ldr	r5, [pc, #44]	; (80051e0 <__libc_init_array+0x40>)
 80051b2:	4c0c      	ldr	r4, [pc, #48]	; (80051e4 <__libc_init_array+0x44>)
 80051b4:	f000 f820 	bl	80051f8 <_init>
 80051b8:	1b64      	subs	r4, r4, r5
 80051ba:	10a4      	asrs	r4, r4, #2
 80051bc:	2600      	movs	r6, #0
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	08005230 	.word	0x08005230
 80051dc:	08005230 	.word	0x08005230
 80051e0:	08005230 	.word	0x08005230
 80051e4:	08005234 	.word	0x08005234

080051e8 <memset>:
 80051e8:	4402      	add	r2, r0
 80051ea:	4603      	mov	r3, r0
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d100      	bne.n	80051f2 <memset+0xa>
 80051f0:	4770      	bx	lr
 80051f2:	f803 1b01 	strb.w	r1, [r3], #1
 80051f6:	e7f9      	b.n	80051ec <memset+0x4>

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
